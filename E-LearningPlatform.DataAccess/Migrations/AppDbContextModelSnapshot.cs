// <auto-generated />
using System;
using E_LearningPlatform.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_LearningPlatform.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_LearningPlatform.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "7fdd22b5-e225-4071-8a1a-a4742bf984fc",
                            AccessFailedCount = 0,
                            AccountId = 1,
                            ConcurrencyStamp = "118825f2-82af-4214-b795-1ddc20da12de",
                            Email = "dev@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mohamed",
                            LastName = "Khaled",
                            LockoutEnabled = false,
                            PasswordHash = "hashedPassword1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "864331b4-869c-420b-87d8-149e5aa375c2",
                            TwoFactorEnabled = false,
                            UserName = "mokhaled"
                        },
                        new
                        {
                            Id = "322337c3-589f-4e5f-9681-b2357a142e90",
                            AccessFailedCount = 0,
                            AccountId = 2,
                            ConcurrencyStamp = "1aef65b4-1718-4f4b-8bf7-9728c51819c2",
                            Email = "design@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ahmed",
                            LastName = "Fathi",
                            LockoutEnabled = false,
                            PasswordHash = "hashedPassword2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ac64b2e-d24c-4a11-b4a7-ac6b9dacf4ac",
                            TwoFactorEnabled = false,
                            UserName = "Ahmed"
                        },
                        new
                        {
                            Id = "b983ee66-785a-496e-a2a5-ecc5a859d4a4",
                            AccessFailedCount = 0,
                            AccountId = 3,
                            ConcurrencyStamp = "5d467e6a-73c5-46fa-82da-5722f31cee5c",
                            Email = "marketing@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mohamed",
                            LastName = "Ashraf",
                            LockoutEnabled = false,
                            PasswordHash = "hashedPassword3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3775ac6e-8156-475c-81f5-6d89370e7101",
                            TwoFactorEnabled = false,
                            UserName = "moAshraf"
                        });
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Development"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Design"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Marketing"
                        });
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfVideos")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CategoryId = 1,
                            CourseName = "ASP.NET Core",
                            Description = "Learn ASP.NET Core",
                            NoOfVideos = 10,
                            Price = 99
                        },
                        new
                        {
                            CourseId = 2,
                            CategoryId = 2,
                            CourseName = "Photoshop Basics",
                            Description = "Learn the basics of Photoshop",
                            NoOfVideos = 5,
                            Price = 49
                        },
                        new
                        {
                            CourseId = 3,
                            CategoryId = 3,
                            CourseName = "Digital Marketing",
                            Description = "Introduction to Digital Marketing",
                            NoOfVideos = 8,
                            Price = 79
                        });
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            StartDate = new DateTime(2024, 10, 17, 11, 22, 12, 435, DateTimeKind.Utc).AddTicks(6756),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            StartDate = new DateTime(2024, 10, 17, 11, 22, 12, 435, DateTimeKind.Utc).AddTicks(6760),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            StartDate = new DateTime(2024, 10, 17, 11, 22, 12, 435, DateTimeKind.Utc).AddTicks(6761),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMediaLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InstructorId");

                    b.HasIndex("UserId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            Qualifications = "PhD in Computer Science",
                            SocialMediaLink = "https://twitter.com/instructor1",
                            UserId = 1
                        },
                        new
                        {
                            InstructorId = 2,
                            Qualifications = "MFA in Design",
                            SocialMediaLink = "https://linkedin.com/instructor2",
                            UserId = 2
                        },
                        new
                        {
                            InstructorId = 3,
                            Qualifications = "MBA in Marketing",
                            SocialMediaLink = "https://instagram.com/instructor3",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Progress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("VideoId");

                    b.ToTable("Progresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnrollmentId = 1,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            EnrollmentId = 2,
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            EnrollmentId = 3,
                            VideoId = 3
                        });
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            RequestId = 1,
                            CourseId = 1,
                            CreationDate = new DateTime(2024, 10, 17, 11, 22, 12, 435, DateTimeKind.Utc).AddTicks(6805),
                            Description = "Request for additional materials",
                            RequestStatus = "Pending",
                            UserId = 1
                        },
                        new
                        {
                            RequestId = 2,
                            CourseId = 2,
                            CreationDate = new DateTime(2024, 10, 17, 11, 22, 12, 435, DateTimeKind.Utc).AddTicks(6807),
                            Description = "Request for a refund",
                            RequestStatus = "Completed",
                            UserId = 2
                        },
                        new
                        {
                            RequestId = 3,
                            CourseId = 3,
                            CreationDate = new DateTime(2024, 10, 17, 11, 22, 12, 435, DateTimeKind.Utc).AddTicks(6808),
                            Description = "Request for course feedback",
                            RequestStatus = "In Progress",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("E_LearningPlatform.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("ProfilePicURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AccountId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Video", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeOnly>("VideoTime")
                        .HasColumnType("time");

                    b.Property<string>("VideoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VideoId");

                    b.HasIndex("CourseId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Course", b =>
                {
                    b.HasOne("E_LearningPlatform.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Enrollment", b =>
                {
                    b.HasOne("E_LearningPlatform.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Instructor", b =>
                {
                    b.HasOne("E_LearningPlatform.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Progress", b =>
                {
                    b.HasOne("E_LearningPlatform.Models.Enrollment", "Enrollment")
                        .WithMany("Progresses")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_LearningPlatform.Models.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("E_LearningPlatform.Models.User", b =>
                {
                    b.HasOne("E_LearningPlatform.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Video", b =>
                {
                    b.HasOne("E_LearningPlatform.Models.Course", "Course")
                        .WithMany("Videos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Course", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("E_LearningPlatform.Models.Enrollment", b =>
                {
                    b.Navigation("Progresses");
                });
#pragma warning restore 612, 618
        }
    }
}
